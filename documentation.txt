Project Description
This Django project implements a basic web application for user registration and contact form submissions. Users can visit the website, register by providing their information, and submit a message. The application validates the submitted data and stores it in the database.

Key Technologies
•	Django Web Framework: Provides the foundation for building the web application.
•	HTML5: Defines the structure and content of the web pages.
•	CSS3: Styles the web pages for visual presentation.


Project Structure
The project follows a standard Django application structure, with various components organized into separate files:

•	app1 Folder: Contains the application-specific code, including models (models.py), forms (forms.py), views (views.py), and configuration (apps.py).

•	urls.py: Defines the URL patterns that map incoming requests to appropriate views in app1.

•	admin.py: Registers the Contact model for administration in the Django admin panel.
Models (models.py)

•	Contact Model: Represents user information submitted through the registration form. 
o	first_name (CharField): Stores the user's first name.
o	last_name (CharField): Stores the user's last name.
o	phone_number (CharField): Stores the user's phone number (optional).
o	email (EmailField): Stores the user's email address.
o	content (TextField): Stores the message submitted by the user.
o	__str__() Method: Defines how Contact objects are displayed in the Django admin.

Forms (forms.py)
•	ContactForm: A form class that inherits from django.forms.ModelForm. 
o	Maps to the Contact model and provides fields for user input validation.
o	Provides a convenient way to handle form data submission and validation.

Views (views.py)
•	index(request): Renders the homepage template (index.html).
•	register(request): Handles user registration: 
o	Checks if the request method is POST.
o	Creates a ContactForm instance with the submitted data.
o	Validates the form data using form.is_valid().
o	If valid, saves the form data to the database using form.save().
o	Redirects to the success page (submit.html) upon successful submission.
o	Renders the registration template (registration/register.html) with an empty form or any errors if the form is invalid.
•	aboutme(request): Renders the about me page (aboutme.html).
•	submit_page(request): Renders the success message page (submit.html) after a successful registration.

URLs (urls.py)
•	Defines named URL patterns that map incoming requests to specific views: 
o	path('', views.index, name="index"): Maps the root URL (/) to the index view.
o	path('register', views.register, name="register"): Maps the /register URL to the register view.
o	path('submit', views.submit_page, name="submit"): Maps the /submit URL to the submit_page view.
o	path('aboutme', views.aboutme, name="aboutme"): Maps the /aboutme URL to the aboutme view.

